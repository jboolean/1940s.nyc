# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: fourtiesnyc
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

package:
  individually: false
custom:
  bucket: fourties-photos
  customDomain:
    domainName: api.1940s.nyc
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: production
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - s3:*
            # - s3:GetObject
            # - s3:PutObject
          Resource: "*"

            # Fn::Join:
            #   - ''
            #   - - 'arn:aws:s3:::'
            #     - Ref: S3BucketFourtiesPhotos
plugins:
  - serverless-plugin-select
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-domain-manager
 
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  app:
    handler: appHandler.handler
    timeout: 10
    events: 
      - http:
          path: /{proxy+}
          method: ANY
    environment:
      DB_HOST: ${ssm:/${self:service}-${sls:stage}-db-host}
      DB_PORT: ${ssm:/${self:service}-${sls:stage}-db-port}
      DB_USERNAME: ${ssm:/${self:service}-${sls:stage}-db-username}
      DB_PASSWORD: ${ssm:/${self:service}-${sls:stage}-db-password}
      DB_DATABASE: ${ssm:/${self:service}-${sls:stage}-db-database}
      STRIPE_SK: ${ssm:/${self:service}-${sls:stage}-stripe-sk}
  convertImage:
    stages:
      - production
    handler: convertImage.handler
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: originals/
  deleteImage:
    stages:
      - production
    handler: convertImage.deletionHandler
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectRemoved:*
          rules:
            - prefix: originals/
  # compressTileAtEdge:
  #   handler: compressTileAtEdge.handler
  #   events:
  #     - preExistingCloudFront:
  #         distributionId: E1WJQI0DS26FO5 # CloudFront distribution ID you want to associate
  #         eventType: origin-request # Choose event to trigger your Lambda function, which are `viewer-request`, `origin-request`, `origin-response` or `viewer-response`
  #         pathPattern: '*' # Specifying the CloudFront behavior
  #         includeBody: false # Whether including body or not within request

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
  # Resources:
  #   S3BucketFourtiesPhotos:
  #     Type: AWS::S3::Bucket
  #     Properties:
  #       BucketName: fourties-photos

  #   ConvertImageLambdaPermissionFourtiesPhotosS3:
  #       Type: 'AWS::Lambda::Permission'
  #       Properties:
  #         FunctionName:
  #           'Fn::GetAtt':
  #             - ConvertImageLambdaFunction
  #             - Arn
  #         Principal: 's3.amazonaws.com'
  #         Action: 'lambda:InvokeFunction'
  #         SourceAccount:
  #           Ref: AWS::AccountId
  #         SourceArn: 'arn:aws:s3:::S3BucketFourtiesPhotos'

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
